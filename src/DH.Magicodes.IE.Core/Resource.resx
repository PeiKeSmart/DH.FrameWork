<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AnUnknownErrorOccurredInTheTemplate" xml:space="preserve">
    <value>An unknown error occurred in the template：</value>
  </data>
  <data name="AppendMethodMustBeBeforeCurrentMethod" xml:space="preserve">
    <value>The Append method must be called before the current method can be called!</value>
  </data>
  <data name="ASheetWithTheNameAlreadyExists" xml:space="preserve">
    <value>A sheet with the name already exists</value>
  </data>
  <data name="ColumnHeadRepeat" xml:space="preserve">
    <value>Column head repeat！</value>
  </data>
  <data name="DataCannotBeEmpty" xml:space="preserve">
    <value>Data cannot be empty!</value>
  </data>
  <data name="DefineTheHeader" xml:space="preserve">
    <value>Please define the header!</value>
  </data>
  <data name="DoNotIgnoreAllTheHeader" xml:space="preserve">
    <value>Do not ignore all the header!</value>
  </data>
  <data name="ErrorBuildingExpression" xml:space="preserve">
    <value>Error building expression:</value>
  </data>
  <data name="ExcelimporterAttributeFeaturesIsNotAnnotated" xml:space="preserve">
    <value>The Sheet attribute is not marked with the ExcelimporterAttribute attribute:</value>
  </data>
  <data name="ExistDuplicateData" xml:space="preserve">
    <value>Data duplication exists, please check! Line：</value>
  </data>
  <data name="ExportingIsOnlySupportedXLSX" xml:space="preserve">
    <value>Exporting ".xlsx "is only supported, that is, Excel97-2003 is not supported!</value>
  </data>
  <data name="ExportResult" xml:space="preserve">
    <value>Export Result</value>
  </data>
  <data name="FileNameMustBeFilled" xml:space="preserve">
    <value>File name must be filled！</value>
  </data>
  <data name="FileNameShouldNotBeEmpty" xml:space="preserve">
    <value>The file name cannot be empty!</value>
    <comment>AppDependencyResolver not initialized. You should initialize it in Startup class</comment>
  </data>
  <data name="FilePathCannotBeEmpty" xml:space="preserve">
    <value>File path cannot be empty!</value>
  </data>
  <data name="Illegal" xml:space="preserve">
    <value>illegal！</value>
  </data>
  <data name="ImportData" xml:space="preserve">
    <value>Import data</value>
  </data>
  <data name="ImportFileDoesNotExist" xml:space="preserve">
    <value>Import file does not exist!</value>
  </data>
  <data name="ImportTemplateNotFoundThisField" xml:space="preserve">
    <value>This field is not found in the current import template!</value>
  </data>
  <data name="InvalidDataFormat" xml:space="preserve">
    <value>Invalid data format！</value>
  </data>
  <data name="MaximumNumberImportsCannotExceeded" xml:space="preserve">
    <value>The maximum number of allowed imports cannot be exceeded</value>
  </data>
  <data name="No" xml:space="preserve">
    <value>no</value>
  </data>
  <data name="OnlySupportExportingCsv" xml:space="preserve">
    <value>Only support exporting ".csv "!</value>
  </data>
  <data name="PleaseFillInTheCorrectDateAndTimeFormat" xml:space="preserve">
    <value>Invalid, please fill in the correct date and time format!</value>
  </data>
  <data name="PleaseFillInTheCorrectDecimal" xml:space="preserve">
    <value>Invalid, please fill in the correct decimal!</value>
  </data>
  <data name="PleaseFillInTheCorrectGUIDFormat" xml:space="preserve">
    <value>Invalid, please fill in the correct GUID format!</value>
  </data>
  <data name="PleaseFillInTheCorrectIntegerValue" xml:space="preserve">
    <value>Invalid, please fill in the correct integer value!</value>
  </data>
  <data name="PleaseFillInTheCorrectTimeSpanFormat" xml:space="preserve">
    <value>Invalid, please fill in the correct timespan format!</value>
  </data>
  <data name="TemplateFilePathCannotBeEmpty" xml:space="preserve">
    <value>Template file path cannot be empty!</value>
  </data>
  <data name="ThereAreNoTemplateDropDownOptions" xml:space="preserve">
    <value>There is no template drop-down option!</value>
  </data>
  <data name="Value" xml:space="preserve">
    <value>value</value>
  </data>
  <data name="WrongData" xml:space="preserve">
    <value>Wrong data</value>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>yes</value>
  </data>
</root>